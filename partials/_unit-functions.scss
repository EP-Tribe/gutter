@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }

    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }

    @for $i from 1 through $digits {
        $n: $n * 10;
    }

    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

@function gh-get-unit($value, $length-checked) {
    $string: inspect($value);
    $string-length: str-length($string);
    $string-end: str-slice($string, $string-length - ($length-checked - 1), $string-length);
    @return $string-end;
}

@function gh-detect-unit($value) {
    @if gh-get-unit($value, 2) == 'px' {
        @return 'pixels';
    } @elseif gh-get-unit($value, 2) == 'pt' {
        @return 'points';
    } @elseif gh-get-unit($value, 3) == 'rem' {
        @return 'rem';
    } @elseif gh-get-unit($value, 2) == 'em' {
        @return 'em';
    } @elseif gh-get-unit($value, 2) == 'vh' {
        @return 'viewport height';
    } @elseif gh-get-unit($value, 2) == 'vw' {
        @return 'viewport width';
    } @elseif gh-get-unit($value, 1) == '%' {
        @return 'percentage';
    }

    @return false;
}

@function gh-do-round($value) {
    @if gh-detect-unit($value) == 'pixels' {
        @return true;
    }

    @return false;
}
